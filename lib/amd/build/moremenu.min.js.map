{"version":3,"sources":["../src/moremenu.js"],"names":["Selectors","regions","moredropdown","morebutton","classes","dropdownitem","dropdownmoremenu","dropdowntoggle","hidden","active","nav","navlink","observed","maxMenuItems","autoCollapse","menu","maxHeight","parentNode","offsetHeight","moreDropdown","querySelector","moreButton","dropdownToggle","children","length","classList","remove","menuNodes","Array","from","reverse","forEach","item","contains","lastNode","removeChild","navLink","hasAttribute","setAttribute","add","prepend","currentAttribute","getAttribute","removeAttribute","insertBefore","window","addEventListener","on","querySelectorAll","dropdown","innerMenu","e","toggle","stopPropagation"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     core/moremenu\n * @package    core\n * @copyright  2021 Moodle\n * @author     Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\n/**\n * Moremenu selectors.\n */\nconst Selectors = {\n    regions: {\n        moredropdown: '[data-region=\"moredropdown\"]',\n        morebutton: '[data-region=\"morebutton\"]'\n    },\n    classes: {\n        dropdownitem: 'dropdown-item',\n        dropdownmoremenu: 'dropdownmoremenu',\n        dropdowntoggle: 'dropdown-toggle',\n        hidden: 'd-none',\n        active: 'active',\n        nav: 'nav',\n        navlink: 'nav-link',\n        observed: 'observed',\n    }\n};\n\nconst maxMenuItems = 6;\n/**\n * Auto Collapse navigation items that wrap into a dropdown menu.\n *\n * @param {HTMLElement} menu The navbar container.\n */\nconst autoCollapse = menu => {\n\n    const maxHeight = menu.parentNode.offsetHeight + 1;\n\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\n\n    const dropdownToggle = menu.querySelector('.' + Selectors.classes.dropdowntoggle);\n\n    // If the menuitems wrap and the menu height is larger than the height of the\n    // parent. Or if the number if menuitems is larger than the maximum menu items\n    // allowed then start pushing navlinks into the moreDropdown.\n    if (menu.offsetHeight > maxHeight || menu.children.length > maxMenuItems) {\n\n        moreButton.classList.remove(Selectors.classes.hidden);\n\n        const menuNodes = Array.from(menu.children).reverse();\n        menuNodes.forEach(item => {\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu)) {\n                // After moving the menuitems into the moreDropdown check again\n                // if the menuheight is still larger then the height of the parent or if the\n                // menu still has more items than maxMenuItems.\n                if (menu.offsetHeight > maxHeight || menu.children.length > maxMenuItems) {\n                    const lastNode = menu.removeChild(item);\n                    const navLink = lastNode.querySelector('.' + Selectors.classes.navlink);\n                    if (navLink && !navLink.hasAttribute('role')) {\n                        // Adding the menuitem role so the dropdown includes the\n                        // Accessibility improvements from theme/boost/amd/src/aria.js\n                        navLink.setAttribute('role', 'menuitem');\n                    }\n\n                    // If there are navLinks that contain an active link in the moreDropdown\n                    // make the dropdownToggle in the moreButton active.\n                    if (navLink.classList.contains(Selectors.classes.active)) {\n                        dropdownToggle.classList.add(Selectors.classes.active);\n                    }\n\n                    // Change the styling of the navLink to a dropdownitem and push it into\n                    // the moreDropdown.\n                    navLink.classList.remove(Selectors.classes.navlink);\n                    navLink.classList.add(Selectors.classes.dropdownitem);\n                    moreDropdown.prepend(lastNode);\n                }\n            }\n        });\n    } else {\n        // If the the menu height is smaller than the height of the parent and there are\n        // less than the maximum items in the menu, then try returning navlinks to the menu.\n\n        if ('children' in moreDropdown) {\n            const menuNodes = Array.from(moreDropdown.children);\n            menuNodes.forEach(item => {\n\n                if (menu.offsetHeight < maxHeight && menu.children.length < maxMenuItems) {\n                    const lastNode = moreDropdown.removeChild(item);\n                    const navLink = lastNode.querySelector('.' + Selectors.classes.dropdownitem);\n                    if (navLink) {\n                        const currentAttribute = navLink.getAttribute('role');\n                        if (currentAttribute === 'menuitem') {\n                            navLink.removeAttribute('role');\n                        }\n                    }\n\n                    // Stop displaying the active state on the dropdownToggle if\n                    // the active navlink is removed.\n                    if (navLink.classList.contains(Selectors.classes.active)) {\n                        dropdownToggle.classList.remove(Selectors.classes.active);\n                    }\n                    navLink.classList.remove(Selectors.classes.dropdownitem);\n                    navLink.classList.add(Selectors.classes.navlink);\n                    menu.insertBefore(lastNode, moreButton);\n                }\n            });\n\n            // If there are no more menuNodes in the dropdown we can hide the moreButton.\n            if (menuNodes.length === 0) {\n                moreButton.classList.add(Selectors.classes.hidden);\n            }\n        }\n\n        if (menu.offsetHeight > maxHeight) {\n            autoCollapse(menu);\n        }\n    }\n    menu.parentNode.classList.add(Selectors.classes.observed);\n};\n\n/**\n * Initialise the more menus.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n */\nexport default menu => {\n    autoCollapse(menu);\n\n    // When the screen size changes make sure the menu still fits.\n    window.addEventListener('resize', () => {\n        autoCollapse(menu);\n    });\n\n    // If there are dropdowns in the MoreMenu, add a new\n    // eventlistener to show the contents on click and prevent the\n    // moreMenu from closing.\n    $('.' + Selectors.classes.dropdownmoremenu).on('show.bs.dropdown', function () {\n        const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n        moreDropdown.querySelectorAll('.dropdown').forEach((dropdown) => {\n            const innerMenu = dropdown.querySelector('[role=\"menu\"]');\n            dropdown.addEventListener('click', (e) => {\n                innerMenu.classList.toggle('show');\n                e.stopPropagation();\n            });\n        });\n    });\n};\n"],"file":"moremenu.min.js"}